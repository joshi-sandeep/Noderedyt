[
    {
        "id": "1973dab93236fd21",
        "type": "comment",
        "z": "ab4da98c3b61308d",
        "name": "-----------------------Mr Tech Bangalore Error Logging-------------------------",
        "info": "",
        "x": 680,
        "y": 40,
        "wires": []
    },
    {
        "id": "7fe854a67dcfacab",
        "type": "inject",
        "z": "ab4da98c3b61308d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 100,
        "wires": [
            [
                "3690d30a4837d7b1"
            ]
        ]
    },
    {
        "id": "9008b425e38f97d0",
        "type": "inject",
        "z": "ab4da98c3b61308d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 140,
        "wires": [
            [
                "52e0d8a8e967839b"
            ]
        ]
    },
    {
        "id": "3690d30a4837d7b1",
        "type": "function",
        "z": "ab4da98c3b61308d",
        "name": "Error 1",
        "func": "let foo = 1;\n\nfoo = null;\n\nmsg.payload = foo.length;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 100,
        "wires": [
            [
                "eab1e8a2faa84f81"
            ]
        ]
    },
    {
        "id": "52e0d8a8e967839b",
        "type": "function",
        "z": "ab4da98c3b61308d",
        "name": "Error 2",
        "func": "let foo = 1;\n\nfoo = null;\n\nmsg.payload = foo.length;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "bb4e7d1a93da0176"
            ]
        ]
    },
    {
        "id": "eab1e8a2faa84f81",
        "type": "debug",
        "z": "ab4da98c3b61308d",
        "name": "Error 1 debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 100,
        "wires": []
    },
    {
        "id": "bb4e7d1a93da0176",
        "type": "debug",
        "z": "ab4da98c3b61308d",
        "name": "Error 2 debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "0e39e131748bfc50",
        "type": "catch",
        "z": "ab4da98c3b61308d",
        "name": "",
        "scope": [
            "3690d30a4837d7b1",
            "52e0d8a8e967839b",
            "3443ccbba2b44130",
            "79eb9eeb4a01c5da"
        ],
        "uncaught": false,
        "x": 250,
        "y": 360,
        "wires": [
            [
                "c98636ef939e5302",
                "f1ecbb289b170ec1",
                "bdc5116bd826b30e"
            ]
        ]
    },
    {
        "id": "c98636ef939e5302",
        "type": "debug",
        "z": "ab4da98c3b61308d",
        "name": "Exception data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 300,
        "wires": []
    },
    {
        "id": "f1ecbb289b170ec1",
        "type": "function",
        "z": "ab4da98c3b61308d",
        "name": "Aggregated Error Collection",
        "func": "let errors = flow.get(\"errors_summary\");\nif (errors===undefined) {\n    errors = [];\n}\n\nif (msg.topic===\"reset\") {\n    errors = [];\n    flow.set(\"errors_summary\", errors);\n    msg.payload = errors;\n    return msg;\n}\n\nlet now = new Date();\nlet key = msg.error.source.name + \"|\" + msg.error.message;\n\nlet found = false;\nfor (let i=0;i<errors.length;i++) {\n    if (errors[i].key === key) {\n        // if match is found, increase the counter and update the time\n        errors[i].count++;\n        errors[i].timestamp = now.getTime();\n        errors[i].time = now.toLocaleString();\n        found = true;\n        break;\n    }\n}\n\n// This error is not logged before, create it\nif (!found) {\n    errors.push({ \"key\": key, \"timestamp\": now.getTime(), \"message\": msg.error.message, \"source\": msg.error.source.name, \"type\": msg.error.source.type, \"count\": 1, \"time\" : now.toLocaleString()});\n}\n\nflow.set(\"errors_summary\", errors);\n\nmsg.payload = errors;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 360,
        "wires": [
            [
                "0028730aeb281471",
                "ead58cc155e57228"
            ]
        ]
    },
    {
        "id": "0028730aeb281471",
        "type": "debug",
        "z": "ab4da98c3b61308d",
        "name": "Summary output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 300,
        "wires": []
    },
    {
        "id": "e95c3cf0b79e451d",
        "type": "inject",
        "z": "ab4da98c3b61308d",
        "name": "Reset logs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 420,
        "wires": [
            [
                "f1ecbb289b170ec1",
                "bdc5116bd826b30e"
            ]
        ]
    },
    {
        "id": "00d5082ae5229df6",
        "type": "inject",
        "z": "ab4da98c3b61308d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 180,
        "wires": [
            [
                "3443ccbba2b44130"
            ]
        ]
    },
    {
        "id": "3443ccbba2b44130",
        "type": "function",
        "z": "ab4da98c3b61308d",
        "name": "node.warn",
        "func": "node.warn(\"This is my warning\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 180,
        "wires": [
            [
                "142f1b26505ff65d"
            ]
        ]
    },
    {
        "id": "142f1b26505ff65d",
        "type": "debug",
        "z": "ab4da98c3b61308d",
        "name": "node warn debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 180,
        "wires": []
    },
    {
        "id": "9193d8cf5499881c",
        "type": "inject",
        "z": "ab4da98c3b61308d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 220,
        "wires": [
            [
                "79eb9eeb4a01c5da"
            ]
        ]
    },
    {
        "id": "79eb9eeb4a01c5da",
        "type": "function",
        "z": "ab4da98c3b61308d",
        "name": "node.error",
        "func": "msg.payload = \"error content\";\nnode.error(\"This is my error\", msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 220,
        "wires": [
            [
                "c084bdd9595eeffe"
            ]
        ]
    },
    {
        "id": "c084bdd9595eeffe",
        "type": "debug",
        "z": "ab4da98c3b61308d",
        "name": "node error debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 220,
        "wires": []
    },
    {
        "id": "bdc5116bd826b30e",
        "type": "function",
        "z": "ab4da98c3b61308d",
        "name": "Individual Error Collection",
        "func": "const collectionsize = 10; // define the number of error to be collected. Once limit is reached, older error is deleted.\n\nlet errors = flow.get(\"errors_all\");\nif (errors===undefined) {\n    errors = [];\n}\n\nif (msg.topic===\"reset\") {\n    errors = [];\n    flow.set(\"errors_all\", errors);\n    msg.payload = errors;\n    return msg;\n}\n\nlet now = new Date();\n\nif (errors.length >= collectionsize) {\n    errors.shift();\n}\n\nerrors.push({ \"timestamp\": now.getTime(), \"message\": msg.error.message, \"source\": msg.error.source.name, \"type\": msg.error.source.type, \"time\": now.toLocaleString()});\n\nflow.set(\"errors_all\", errors);\n\nmsg.payload = errors;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 420,
        "wires": [
            [
                "68fbc2435cb62028",
                "e017aa84435199cf"
            ]
        ]
    },
    {
        "id": "68fbc2435cb62028",
        "type": "debug",
        "z": "ab4da98c3b61308d",
        "name": "All output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 480,
        "wires": []
    },
    {
        "id": "ead58cc155e57228",
        "type": "template",
        "z": "ab4da98c3b61308d",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table>\n    <tr><th>Last Occurance</th><th>Count</th><th>Message</th><th>Source</th><th>Node Type</th></tr>\n    {{#payload}}\n        <tr class=\"\">\n            <td>{{time}}</td>\n            <td>{{count}}</td>\n            <td>{{message}}</td>\n            <td>{{source}}</td>\n            <td>{{type}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 800,
        "y": 360,
        "wires": [
            [
                "016f470b36994160"
            ]
        ]
    },
    {
        "id": "e017aa84435199cf",
        "type": "template",
        "z": "ab4da98c3b61308d",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table>\n    <tr><th>Time</th><th>Message</th><th>Source</th><th>Node Type</th></tr>\n    {{#payload}}\n        <tr class=\"\">\n            <td>{{time}}</td>\n            <td>{{message}}</td>\n            <td>{{source}}</td>\n            <td>{{type}}</td>\n        </tr>\n    {{/payload}}\n</table>\n\n",
        "output": "str",
        "x": 800,
        "y": 420,
        "wires": [
            [
                "2e653e0f5c8a58c7"
            ]
        ]
    },
    {
        "id": "016f470b36994160",
        "type": "ui_template",
        "z": "ab4da98c3b61308d",
        "group": "1d99668c76507897",
        "name": "",
        "order": 0,
        "width": "24",
        "height": "10",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "2e653e0f5c8a58c7",
        "type": "ui_template",
        "z": "ab4da98c3b61308d",
        "group": "9b59378417275542",
        "name": "",
        "order": 0,
        "width": "24",
        "height": "10",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "ccf160c793757599",
        "type": "inject",
        "z": "ab4da98c3b61308d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 560,
        "wires": [
            [
                "07e0d32cb4258693"
            ]
        ]
    },
    {
        "id": "07e0d32cb4258693",
        "type": "function",
        "z": "ab4da98c3b61308d",
        "name": "Summary file",
        "func": "// Get the current time and convert it to text\nvar now = new Date();\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Generate out file name pattern\nmsg.fname = \"error_summary_\"+ yyyy + mm + dd + \".csv\";\n// Full filename with path for the file node later\nmsg.filename = \"D:/ytexamples/\"+ msg.fname;\nmsg.email = {};\nmsg.email.summaryfilename = msg.filename;\nmsg.email.todaytext = now.toLocaleDateString();\n\nlet errors = flow.get(\"errors_summary\");\nmsg.email.summarycontent = errors;\n\n// Check if error log exists at all\nif (errors !== undefined) {\n    // Check if we have any errors\n    if (errors.length>0) {\n        msg.payload = errors;\n        node.status({ fill: \"blue\", shape: \"ring\", text: msg.fname });\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 560,
        "wires": [
            [
                "6f80908adbdef069"
            ]
        ]
    },
    {
        "id": "99696ae7c586952d",
        "type": "file",
        "z": "ab4da98c3b61308d",
        "name": "Summary file create",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 840,
        "y": 560,
        "wires": [
            [
                "c8592f1e848400d4"
            ]
        ]
    },
    {
        "id": "6f80908adbdef069",
        "type": "csv",
        "z": "ab4da98c3b61308d",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,time,message,source,type,count",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 650,
        "y": 560,
        "wires": [
            [
                "99696ae7c586952d"
            ]
        ]
    },
    {
        "id": "c8592f1e848400d4",
        "type": "function",
        "z": "ab4da98c3b61308d",
        "name": "All errors file",
        "func": "// Get the current time and convert it to text\nvar now = new Date();\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Generate out file name pattern\nmsg.fname = \"error_all_\"+ yyyy + mm + dd + \".csv\";\n// Full filename with path for the file node later\nmsg.filename = \"D:/ytexamples/\"+ msg.fname;\nmsg.email.allerrorsfilename = msg.filename;\nmsg.email.allerrorsfilenameonly = msg.fname;\n\nlet errors = flow.get(\"errors_all\");\n\n// Check if error log exists at all\nif (errors !== undefined) {\n    // Check if we have any errors\n    if (errors.length>0) {\n        msg.payload = errors;\n        node.status({ fill: \"blue\", shape: \"ring\", text: msg.fname });\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 640,
        "wires": [
            [
                "1d7a03ffae1177f4"
            ]
        ]
    },
    {
        "id": "b08033009ac93bc6",
        "type": "file",
        "z": "ab4da98c3b61308d",
        "name": "All errors file create",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "1d7a03ffae1177f4",
        "type": "csv",
        "z": "ab4da98c3b61308d",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,time,message,source,type",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 650,
        "y": 640,
        "wires": [
            [
                "b08033009ac93bc6"
            ]
        ]
    },
    {
        "id": "be1ac7857ed6d172",
        "type": "change",
        "z": "ab4da98c3b61308d",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "reset",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 480,
        "wires": [
            [
                "f1ecbb289b170ec1",
                "bdc5116bd826b30e"
            ]
        ]
    },
    {
        "id": "1d99668c76507897",
        "type": "ui_group",
        "name": "Aggregated Errors",
        "tab": "fc0d1c03dd805146",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9b59378417275542",
        "type": "ui_group",
        "name": "All Errors",
        "tab": "fc0d1c03dd805146",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fc0d1c03dd805146",
        "type": "ui_tab",
        "name": "Error Handling",
        "icon": "error",
        "disabled": false,
        "hidden": false
    }
]
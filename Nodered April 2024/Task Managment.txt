[
    {
        "id": "00d9b1eaa31c4eee",
        "type": "group",
        "z": "f1431a7d5aec6eed",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4d4046726dfdb405",
            "f55ac60fbbf270bb",
            "4fcb56206e3d7085",
            "e3a9063959d1d01c",
            "29ca471757f1c444",
            "1af3112979f934c0",
            "e87a6d23ac4aad9f",
            "8e58c406a415915e",
            "7a9e36819681762a"
        ],
        "x": 224,
        "y": 59,
        "w": 572,
        "h": 302
    },
    {
        "id": "4d4046726dfdb405",
        "type": "function",
        "z": "f1431a7d5aec6eed",
        "g": "00d9b1eaa31c4eee",
        "name": "Add Task",
        "func": "var newNode = {\n    value: msg.payload.value,\n    next: null\n};\n\nif (flow.get('head') === undefined) {\n    flow.set('head', newNode);\n    flow.set('tail', newNode);\n} else {\n    var tail = flow.get('tail');\n    tail.next = newNode;\n    flow.set('tail', newNode);\n}\n\nmsg.payload = flow.get('head');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 240,
        "wires": [
            [
                "29ca471757f1c444"
            ]
        ]
    },
    {
        "id": "f55ac60fbbf270bb",
        "type": "http in",
        "z": "f1431a7d5aec6eed",
        "g": "00d9b1eaa31c4eee",
        "name": "",
        "url": "/push",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 320,
        "y": 240,
        "wires": [
            [
                "4d4046726dfdb405"
            ]
        ]
    },
    {
        "id": "4fcb56206e3d7085",
        "type": "http in",
        "z": "f1431a7d5aec6eed",
        "g": "00d9b1eaa31c4eee",
        "name": "",
        "url": "/pop",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 320,
        "y": 320,
        "wires": [
            [
                "e3a9063959d1d01c"
            ]
        ]
    },
    {
        "id": "e3a9063959d1d01c",
        "type": "function",
        "z": "f1431a7d5aec6eed",
        "g": "00d9b1eaa31c4eee",
        "name": "Remove Task",
        "func": "if (flow.get('head') === undefined) {\n    msg.payload = null;\n    return msg;\n}\n\nvar head = flow.get('head');\nif (head === flow.get('tail')) {\n    flow.set('head', undefined);\n    flow.set('tail', undefined);\n} else {\n    var currentNode = head;\n    while (currentNode.next !== flow.get('tail')) {\n        currentNode = currentNode.next;\n    }\n    currentNode.next = null;\n    flow.set('tail', currentNode);\n}\n\nmsg.payload = flow.get('head');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 320,
        "wires": [
            [
                "29ca471757f1c444"
            ]
        ]
    },
    {
        "id": "29ca471757f1c444",
        "type": "http response",
        "z": "f1431a7d5aec6eed",
        "g": "00d9b1eaa31c4eee",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 720,
        "y": 280,
        "wires": []
    },
    {
        "id": "1af3112979f934c0",
        "type": "http in",
        "z": "f1431a7d5aec6eed",
        "g": "00d9b1eaa31c4eee",
        "name": "",
        "url": "/linkedlist",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 320,
        "y": 180,
        "wires": [
            [
                "e87a6d23ac4aad9f"
            ]
        ]
    },
    {
        "id": "e87a6d23ac4aad9f",
        "type": "template",
        "z": "f1431a7d5aec6eed",
        "g": "00d9b1eaa31c4eee",
        "name": "LinkedList HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Managment</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n        }\n        .container {\n            text-align: center;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 10px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n        .controls {\n            margin-bottom: 20px;\n        }\n        .controls input {\n            padding: 10px;\n            width: 200px;\n            margin-right: 10px;\n        }\n        .controls button {\n            padding: 10px 20px;\n            margin: 5px;\n            cursor: pointer;\n        }\n        .linkedlist {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-wrap: wrap;\n            margin-top: 20px;\n        }\n        .node {\n            display: flex;\n            align-items: center;\n            margin: 5px;\n            opacity: 0;\n            transform: translateY(-20px);\n            transition: opacity 0.5s, transform 0.5s;\n        }\n        .node.show {\n            opacity: 1;\n            transform: translateY(0);\n        }\n        .node div {\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: white;\n            border-radius: 5px;\n            margin-right: 5px;\n            position: relative;\n        }\n        .node div::after {\n            content: 'â†’';\n            position: absolute;\n            right: -15px;\n            color: #007bff;\n            font-weight: bold;\n        }\n        .node:last-child div::after {\n            content: '';\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Task Managment</h1>\n        <div class=\"controls\">\n            <input type=\"text\" id=\"valueInput\" placeholder=\"Enter value\">\n            <button onclick=\"push()\">Add Task</button>\n            <button onclick=\"pop()\">Remove Task</button>\n        </div>\n        <div class=\"linkedlist\" id=\"linkedlist\">\n            <!-- Linked list will be visualized here -->\n        </div>\n    </div>\n    <script>\n        function renderList(list) {\n            const listElement = document.getElementById('linkedlist');\n            listElement.innerHTML = '';\n            let currentNode = list;\n            while (currentNode) {\n                const nodeElement = document.createElement('div');\n                nodeElement.classList.add('node');\n                nodeElement.innerHTML = `<div>${currentNode.value}</div>`;\n                listElement.appendChild(nodeElement);\n                // Trigger reflow to restart the animation\n                nodeElement.offsetHeight;\n                nodeElement.classList.add('show');\n                currentNode = currentNode.next;\n            }\n        }\n\n        async function push() {\n            const valueInput = document.getElementById('valueInput');\n            const value = valueInput.value;\n            if (value) {\n                const response = await fetch('/push', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ value })\n                });\n                const data = await response.json();\n                renderList(data);\n                valueInput.value = '';\n                valueInput.focus();\n            }\n        }\n\n        async function pop() {\n            const response = await fetch('/pop', {\n                method: 'POST'\n            });\n            const data = await response.json();\n            renderList(data);\n        }\n    </script>\n</body>\n</html>\n",
        "output": "str",
        "x": 520,
        "y": 180,
        "wires": [
            [
                "8e58c406a415915e"
            ]
        ]
    },
    {
        "id": "8e58c406a415915e",
        "type": "http response",
        "z": "f1431a7d5aec6eed",
        "g": "00d9b1eaa31c4eee",
        "name": "",
        "statusCode": "",
        "headers": {
            "Content-Type": "text/html"
        },
        "x": 720,
        "y": 180,
        "wires": []
    },
    {
        "id": "7a9e36819681762a",
        "type": "comment",
        "z": "f1431a7d5aec6eed",
        "g": "00d9b1eaa31c4eee",
        "name": "Task Managment",
        "info": "",
        "x": 520,
        "y": 100,
        "wires": []
    }
]